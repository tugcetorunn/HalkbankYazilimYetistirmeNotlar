Console.BackgroundColor = ConsoleColor.Blue; -> bir şey yazdırmadan renk görünmez.
sadece text arka plan rengi ayarlıyor.
Console.ForegroundColor = ConsoleColor.Red; -> text rengini ayarlıyor. yine yukarıdaki
gibi text yazdırmadan görünmez.




mails.Split(',', ';'); -> string bir değeri ayırmak için kullanılır. virgül veya 
noktalı virgül ile yani ikisini de gördüğünde ayırır.




res = double.TryParse(Console.ReadLine(), out deger); -> kullanıcıdan bir değer alır 
ve bu değeri double türüne dönüştürmeye çalışır. Eğer dönüşüm başarılı olursa, deger 
değişkenine atar ve res true olur. Başarısız olursa res false olur.
if (!res)
{
    Console.WriteLine("değer uygun değil!");
}
Console.WriteLine("Devam etmek istiyorsanız 1 giriniz: ");
return Convert.ToInt32(Console.ReadLine()) == 1; -> kullanıcıdan bir değer alır ve bu
değeri int türüne dönüştürmeye çalışır. Eğer dönüşüm başarılı olursa, 1'e eşit olup 
olmadığını kontrol eder. Eğer eşitse true döner, değilse false döner.




local function -> yerel fonksiyon. sadece tanımlandığı blokta geçerli olan bir 
fonksiyondur. dışarıdan erişilemez.




foreach teki iterasyon değişkenine (var item) foreach içinde değer atanamaz. 




Trim()	Hem baştaki hem sondaki boşlukları temizler.
TrimStart()	Sadece baştaki (soldaki) boşlukları siler.
TrimEnd()	Sadece sondaki (sağdaki) boşlukları siler.




var turkce2Ingilizce = new Dictionary<char, char>
{
    { 'ı', 'i' },
    { 'ö', 'o' },
    { 'ü', 'u' },
    { 'ş', 's' },
    { 'ç', 'c' },
    { 'ğ', 'g' }
};
var sb = new StringBuilder(metin.Length);
foreach (var ch in metin)
{
    sb.Append(turkce2Ingilizce.TryGetValue(ch, out char yeniChar) ? yeniChar : ch);
}
return sb.ToString();
StringBuilder sınıfı, string bir değeri değiştirmek için kullanılır. String sınıfı
immutable olduğu için string bir değeri değiştirmek istediğimizde yeni bir string
oluşturur. Bu da performans kaybına neden olur. StringBuilder ise mutable olduğu için
string bir değeri değiştirmek için yeni bir string oluşturmaz. Bu da performans 
kazancı sağlar.




int a = 5;
int b = a;  // b artık 5
b = 10;
Console.WriteLine($"a: {a}, b: {b}"); // a: 5, b: 10
b = a yaptığında a'nın değeri b'ye kopyalanır ama ilişkili kalmazlar. 




string s1 = "merhaba";
string s2 = s1;
s2 = "selam";
Console.WriteLine($"s1: {s1}, s2: {s2}"); // s1: merhaba, s2: selam
string bir referans tiptir, ancak immutable olduğu için burada da kopya gibi davranır.
Ama aslında arka planda yeni string nesnesi oluşur.




Nesne class’ı, Heap #100 adresinde tutuluyor.
Hem n1 hem n2 bu nesneyi işaret ettiği için değişiklik yaptığında ortak nesne 
etkilenir.




class seviyesinde (bir de dll seviyesi var) değişkenler(field)  default olarak private 
tır. varsayılan öyle olsa da private belirtmek clean code açısından iyidir. private 
old için instance ile erişemiyoruz.
internal class Personel
{
    private int id; 
    public int Id;
}



- rami kullanma nedenimiz tamamen performansla alakalıdır.




bir metodun geri dönüş tipi void olsa ama ben bir değişkeni veya bir değeri dışarıya 
aktarmak istesem nasıl aktarırım -> out, ref
🔹 1. ref (referansla parametre)
📌 Amaç: Metoda gelen değişkenin kendisine erişmek, değişiklik yapmak.
Değişken hem çağıran tarafta tanımlanmış olmalı, hem de ilk değeri atanmış olmalı.
Değişiklik metot dışında da kalıcı olur.
void RefExample(ref int x)
{
    x += 10;
}

int sayi = 5;
RefExample(ref sayi);
Console.WriteLine(sayi);  // çıktı: 15
2. örnek
int CarpVeArtir(ref int x, int y)
{
    x += 1; // x dışarıda da artmış olur
    return x * y;
}

int sayi = 3;
int sonuc = CarpVeArtir(ref sayi, 4);

Console.WriteLine(sonuc); // 16 (4 * (3+1))
Console.WriteLine(sayi);  // 4
🔹 2. out (çıktı parametresi)
📌 Amaç: Metot içinden birden fazla değer döndürmek veya değeri dışarıya aktarmak.
Değişken çağıran yerde tanımlı olmalı ama ilk değer verilmesi gerekmez.
Metot içinde mutlaka atanmalı.
void OutExample(out int x)
{
    x = 42;
}
int sonuc;
OutExample(out sonuc);
Console.WriteLine(sonuc);  // çıktı: 42
2. örnek
bool ParseInt(string metin, out int sayi)
{
    return int.TryParse(metin, out sayi);
}
int sonuc;
bool basarili = ParseInt("123", out sonuc);
Console.WriteLine($"Başarılı mı: {basarili}, Sonuç: {sonuc}");
🔹 3. in (salt okunur referans parametre)
📌 Amaç: Büyük nesneleri kopyalamadan göndermek ama değiştirilmesini engellemek.
Değer metot içinde sadece okunabilir, değiştirilemez.
ref gibi performans sağlar ama güvenlidir.
void InExample(in int x)
{
    Console.WriteLine(x);
    // x = 100; // Hata: 'in' parametre değiştirilemez
}
int veri = 20;
InExample(in veri);
🔹 4. params (değişken sayıda parametre)
📌 Amaç: Metoda değişken sayıda parametre göndermek.
int toplam(params int[] sayilar)
{
	int toplam = 0;
	foreach (var sayi in sayilar)
	{
		toplam += sayi;
	}
	return toplam;
}
int sonuc = toplam(1, 2, 3, 4, 5); // 15
*** ref vs out farkı
         Özellik	                   ref	              out
Önceden değer atanmalı mı?	          Evet               Hayır
Metot içinde değer atanmalı mı?	    Gerekmez	     Evet (zorunlu)
Çift yönlü mü?	               Evet (giriş/çıkış)   Hayır (sadece çıkış)
* * * bu parametre türleri sadece void metodlarda kullanılmaz. Her tür metodda 
(geri dönüş tipi ne olursa olsun) kullanılabilirler. Ama amaçlarına göre bazıları 
void metodlarda daha sık kullanılır.



👷‍ Compile Time (Derleme Zamanı):
Kodun, bilgisayarın anlayabileceği hale (makine koduna) çevrildiği zamandır.
Kod yazarsın ➜ "Derlersin" ➜ .exe ya da .dll dosyası oluşur.
💡 Yani kod çalışmadan önce gerçekleşir.

🚀 Runtime (Çalışma Zamanı):
Derlenmiş programın çalıştığı andır.
Kullanıcı programı açar ➜ Program kodu çalışmaya başlar ➜ İşlem devam eder
💡 Yani program çalışırken gerçekleşir.

🧑‍🍳 Compile time, yemek tarifine göre alışveriş yapman ve malzemeleri hazırlamandır.
🔥 Runtime, tencereyi ocağa koyup yemeği pişirme aşamasıdır.
Malzeme eksikse, derleme (compile) aşamasında fark edilir ve hata verilir.
Ama malzeme var, ama bozuksa ya da yemeği yanlış karıştırırsan bu hata çalışma 
zamanında (runtime) olur.

Durum	                    Compile Time	                   Runtime
Hatalar (error)  - Derleme sırasında fark edilir -Program çalışırken fark edilir
Örnek hata       - int x = "abc"; (tür uymaz)	 -int.Parse("abc") ➜ Format hatası
Performans etkisi- Yükleme öncesi optimize olur	 -Anlık hesap yapılır, yavaş olabilir
Kod davranışı    - Sabittir, değişmez            -Dinamik, koşullara göre değişebilir




* camelCase  -> değişken isimlerinde kullanılır.
* PascalCase -> class isimlerinde kullanılır.
* snake_case -> python
* kebab-case -> mvc de tagHelpers ta kullanılır. asp-route vs.
* Hungarian Notation -> değişkenin türünü belirtir. strName, intAge, txtAd ... 
windows formda kullanılır.



C#'ta 'var' ve 'dynamic' arasındaki fark nedir?
var -> derleme zamanında (compile time) tip belirlenir. yani derleyici, atanan değere göre
tipi belirler. bu yüzden var ile tanımlanan bir değişkenin tipi, atandığı değere göre
değişmez. sadece ilk atandığı değere göre belirlenir. örneğin:
var sayi = 10; // int
sayi = "merhaba"; // hata verir, çünkü sayi değişkeni int türünde tanımlandı.
sayi = 20; // geçerli, çünkü sayi değişkeni int türünde tanımlandı.
dynamic -> çalışma zamanında (runtime) tip belirlenir. yani atanan değere göre tip
belirlenir. bu yüzden dynamic ile tanımlanan bir değişkenin tipi, atandığı değere göre
değişebilir. örneğin:
dynamic sayi = 10; // int
sayi = "merhaba"; // geçerli, çünkü sayi değişkeni dynamic türünde tanımlandı.
var -> verinin tipi belli olana kadar verilen bir placeholder gibi çalışır. runtimeda
da designtimeda da tipin belirlendiği durumları var.




is -> tür kontrolü yapmak için kullanılır




C# dilinde 'yield return' ifadesi ne işe yarar ->  Gerçek zamanlı veri üretir




Garbage Collector ne zaman çalışır ->  Bellek azaldığında




'using' bloğunun amacı -> Otomatik nesne temizliği yapmak




C#'ta record türü neden tercih edilir? ->  Immutable veri yapısı sunduğu için




continue komutu, döngüde mevcut iteration ın kalan kısmını atlayarak doğrudan bir sonraki 
iteration a geçilmesini sağlar.
for (int i = 0; i < 10; i++)
{
    if (i % 2 == 0)
        continue; // i çiftse atla

    Console.WriteLine(i);
}

break komutu, döngüyü tamamen sonlandırır ve döngüden çıkar.
for (int i = 0; i < 10; i++)
{
    if (i == 5)
        break;

    Console.WriteLine(i);
}

return komutu, döngüden değil bulunduğu metottan çıkışı sağlar. Yani döngüyü de, döngünün 
dışında kalan kodları da sonlandırır ve çağıran metoda dönüş yapar.
void Yazdir()
{
    for (int i = 0; i < 10; i++)
    {
        if (i == 3)
            return; // metodu tamamen sonlandır

        Console.WriteLine(i);
    }

    Console.WriteLine("Bu satır çalışmaz");
}
// 2. örnek
// metod
void SiparisleriKontrolEt(List<List<int>> siparisler)
{
    foreach (var musteriSiparisleri in siparisler)
    {
        foreach (var urunId in musteriSiparisleri)
        {
            if (urunId == -1)
            {
                Console.WriteLine("Hatalı ürün ID tespit edildi. Kontrol sonlandırıldı.");
                return;
            }

            Console.WriteLine($"Ürün kontrol ediliyor: {urunId}");
        }
    }

    Console.WriteLine("Tüm siparişler başarıyla kontrol edildi.");
}
// metodun çağrıldığı kod
SiparisleriKontrolEt(new List<List<int>>
{
    new List<int> { 101, 102, 103 },
    new List<int> { 201, -1, 203 }, // hata var
    new List<int> { 301, 302, 303 }
});
// çıktı
Ürün kontrol ediliyor: 101
Ürün kontrol ediliyor: 102
Ürün kontrol ediliyor: 103
Ürün kontrol ediliyor: 201
Hatalı ürün ID tespit edildi. Kontrol sonlandırıldı.




const - sabittir, değiştirilemez (muttable). tanımlandığı yerde değer atanmalıdır. sadece değer
tanımlandığı yerde değişir.
public const double Pi = 3.14;
static metod gibi classAdi. denilerek ulaşılır.

readonly - sadece constructor da değeri değiştirilebilir. 
public readonly double katsayi = 12.5;
static metod gibi classAdi. denilerek değil, nesne üzerinden ulaşılır.




Collections

- arrayden farklı olarak boyutu dinamik olarak değiştirilebilen veri yapılarıdır.
- boyutu belli yapılarda aynı türdeki verileri saklamak için array kullanılır.
- arraylerde boyutu yeniden ayarlamak için resize metodu kullanılabilir. ama maliyeti vardır.
- arraylerde veri tipleri aynı olmalıdır. collectionlarda farklı olabilir.
- array ler 1 den 3 e kadar boyuta sahip olabilir. collectionlar ise 1.
- resim dosyaları (1096 * 768 * rgb||png||bw||jpeg... -> boyutu), ses dosyaları, string (char 
array) birer array örneğidir.
- collectionlar, arraylerden daha esnek ve daha güçlüdür. 
- collectionlar, arraylerden daha fazla işlevsellik sağlar. (ekleme, çıkarma, arama, sıralama, 
filtreleme, döngüleme, ...)
- collectionlar, arraylerden daha fazla bellek kullanır. (arrayler bellekte sürekli yer kaplar. 
collectionlar ise sadece kullanıldıklarında bellekte yer kaplar.) ??
- stack, queue, linkedlist, sortedlist, dictionary, hashtable, list, arraylist, ... (collections)
- ienumerable, ienumerator, iqueryable collectionların karakteristiğidir. collection örneği 
değillerdir.
- collectionlar, generic ve non-generic olarak ikiye ayrılır. generic olanlar, tip güvenliği 
sağlar. non-generic olanlar, tip güvenliği sağlamaz.
- linked list - otobüste arkada olan bir yolcunun kartının elden ele öne doğru ulaştırılması ve
geri yollanması. kartı alan herkes sadece kimden aldığının ve kime verdiğinin bilgisini tutar.
kart sadece gidiyorsa tek yönlü linkedlist, gidip geri dönüyorsa çift yönlü linkedlist.
- List<T> (yani array tabanlı listeler), ortadan veri silindiğinde tüm elemanları kaydırmak 
zorunda kalır. LinkedList<T> ise her elemanı bir düğüm (node) olarak tutar ve sadece 
bağlantıları (referansları) değiştirir.
- Stack<string> yigin = new Stack<string>();
yigin.Push("ilk");
yigin.Push("son");
string ustteki = yigin.Peek(); // "son"
string lifo = yigin.Pop(); // "son"
- Queue<int> kuyruk = new Queue<int>();
kuyruk.Enqueue(10);
kuyruk.Enqueue(20);
int ustteki = kuyruk.Peek(); // 10
int fifo = kuyruk.Dequeue(); // 10
- SortedList<int, string> siraliListe = new SortedList<int, string>();
siraliListe.Add(3, "Üç");
siraliListe.Add(1, "Bir");
siraliListe.Add(2, "İki");
- LinkedList<string> bagliListe = new LinkedList<string>();
bagliListe.AddLast("A");
bagliListe.AddLast("B");
bagliListe.AddFirst("Önce");
- HashSet<int> sayilar = new HashSet<int> { 1, 2, 3 };
sayilar.Add(3); // Eklenmez, çünkü zaten var
STACK
- LIFO mekanizmasında çalışır. klavye backspace, tarayıcı geçmişi, ctrl + z işlemi, stack bölgesi gibi.
QUEUE
- FIFO mekanizmasında çalışır.
HASHTABLE (DICTIONARY<>)
- Key-Value pair şeklinde çalışır. Key'ler unique olmalıdır. Key'lerin hash değerleri alınarak value'lar saklanır.



Doğrudan çalıştırılabilir dosyalar -> exe, com
Her exe dosyasında mutlaka bir main metodu(entrypoint) bulunur. dll dosyalarında entrypoint 
bulunmaz.




C# .NET’te, eğer çalışma zamanında
(runtime) atılan bir istisna (exception)
yakalanamazsa aşağıdakilerden hangisi
bu istisnayı yakalayacaktır?
A)CLR ************
B) Derleyici
C) İşletim sistemi
D)Linker
E) Loader




List sınıfı metodları:
- Add: Listeye eleman ekler.
- AddRange: Listeye birden fazla eleman ekler.
- Clear: Listeyi temizler.
- Contains: Liste içinde belirli bir elemanın olup olmadığını kontrol eder.
- Count: Liste içindeki eleman sayısını döner.
- CopyTo: Liste elemanlarını bir diziye kopyalar.
- Find: Liste içinde belirli bir elemanı arar ve bulursa döner.
- FindAll: Liste içinde belirli bir elemanı arar ve bulursa döner.
- FindIndex: Liste içinde belirli bir elemanın indeksini döner.
- FindLast: Liste içinde belirli bir elemanın son indeksini döner.
- ForEach: Liste içindeki her eleman için bir işlem yapar.
- IndexOf: Liste içinde belirli bir elemanın indeksini döner.
- Insert: Listeye belirli bir indekse eleman ekler.
- LastIndexOf: Liste içinde belirli bir elemanın son indeksini döner.
- Remove: Liste içinden belirli bir elemanı siler.
- RemoveAt: Liste içinden belirli bir indeksteki elemanı siler.
- RemoveRange: Liste içinden belirli bir aralıktaki elemanları siler.
- Reverse: Listeyi ters çevirir.
- Sort: Listeyi sıralar.
- ToArray: Listeyi bir diziye dönüştürür.
- TrimExcess: Liste içindeki gereksiz boş alanları temizler.
- TrueForAll: Liste içindeki tüm elemanların belirli bir koşulu sağlayıp sağlamadığını 
kontrol eder.
- AsReadOnly: Listeyi salt okunur hale getirir.
- BinarySearch: Liste içinde ikili arama yaparak belirli bir elemanın indeksini döner.
- BinarySearch: Liste içinde ikili arama yaparak belirli bir elemanın indeksini döner.
- Capacity: Liste içindeki eleman sayısını döner.
- CopyTo: Liste elemanlarını bir diziye kopyalar.
- GetEnumerator: Liste içindeki elemanları döngü ile gezmek için bir enumerator döner.




aşağıdaki sebeplerden dolayı generic yapıları kullanmalıyız.
1. performans (boxing-unboxing i önlüyo)
2. tip güvenliği (2.0 öncesi generic olmayan yapılar object aldığı için listeye ekleme
  yaparken int da eklesek string de eklesek compile time da sıkıntı olmuyor)
3. compile time safety (copilot yazdı)




*** class, struct, inheritance, interface, new() generic kısıtlardır. birlikte de kullanılabilirler.
///// where T : class
Test<string> test = new Test<string>();
Test<object> test1 = new Test<object>();
Test<Urun> test3 = new Test<Urun>();
/!/ Test<int> test2 = new Test<int>(); // int bir referans tip değildir, structtır. bu yüzden hata alırız.
///
///// where T : struct
Islem<int> test4 = new Islem<int>();
Islem<bool> test5 = new Islem<bool>();
/!/ Islem<Urun> test6 = new Islem<Urun>();
///
///// where T : inheritance (personel)
PersonelIslemleri<Hizmetli> personelIslemleri = new PersonelIslemleri<Hizmetli>();
PersonelIslemleri<Mudur> personelIslemleri1 = new PersonelIslemleri<Mudur>();
/!/ PersonelIslemleri<string> personelIslemleri2 = new PersonelIslemleri<string>();
///
///// where T : interface
SilahRuhsatIslemleri<Mudur> silahRuhsatIslemleri = new SilahRuhsatIslemleri<Mudur>();
SilahRuhsatIslemleri<Guvenlik> silahRuhsatIslemleri1 = new SilahRuhsatIslemleri<Guvenlik>();
/!/ SilahRuhsatIslemleri<Hizmetli> silahRuhsatIslemleri1 = new SilahRuhsatIslemleri<Hizmetli>();
///
///// where T : new() -> anonymous type gibi bir generic kısıt yani her türden alabilir sadece bir türü new lemek için default constructor olmalı.
MuhasebeIslemleri<Mudur> muhasebeIslemleri = new MuhasebeIslemleri<Mudur>();
MuhasebeIslemleri<Memur> muhasebeIslemleri1 = new MuhasebeIslemleri<Memur>();
/!/ MuhasebeIslemleri<Hizmetli> muhasebeIslemleri1 = new MuhasebeIslemleri<Hizmetli>(); // default constructor olmadığı için hata verir.




int? sayi = null; // value types null olamaz. bu yüzden nullable lığı sağlayacak bir şeye ihtiyaç duyar (? işareti, nullable keywordü, Nullable<T>)
Nullable<int> sayi2 = null; // nullable where t : struct kısıtlıdır. çünkü value type larda kullanılır.
Console.WriteLine(sayi2.GetValueOrDefault()); // null cevabı almamak için kullanılır. null ise 0 döndürür.
Console.WriteLine(sayi ?? -1); // null kontrolü -> ? ne elvis operatörü denir.



internal enum Gunler : byte // numeric tarafın tipini değiştirebiliriz bu şekilde. default inttir. tamsayı olmalıdır, double kabul etmez. kalıtım değildir.



sehirler[16] c# ta bu yapı indexer olarak geçer. key değeri vererek value değerini döndürür.



DOSYA

- verileri kalıcı olarak tutmamızı sağlar.
- disk üzerinde veri dosya olarak saklanır. txt, docx, xlsx, pdf, png, xml, csv, ...
- dosyalar ikiye ayrılır: metin (text) dosyaları(header olmaz düz string) ve binary (resim, müzik dosyaları)(header ve data kısımlarından oluşur 
(header ını bilmediğimiz hiçbir binary dosyayı okuyamayız)) dosyalar.
- json, xml, csv farkı nelerdir? json ve xml dosyaları metin dosyalarıdır, csv ise metin dosyası olmasına rağmen verileri virgülle ayırır. 
json ve xml dosyaları verileri daha düzenli ve okunabilir şekilde saklar. json ve xml dosyaları verileri nesne olarak saklar. json dosyaları javascript 
nesneleri gibi saklar. xml ise html gibi saklar. csv ise tablo gibi saklar. 
- xml den json a geçme nedenimiz xml daha büyük dosyalar oluştururken json daha küçük dosyalar oluşturur. maliyet yarı yarıya iner.
- json dosyaları daha hızlı okunur ve yazılır.
- xml ve json hiyerarşik yapıdadır. csv ise tablo yapısındadır.
- serializasyon: nesnelerin veri dosyasına yazılması işlemi. ramdeki bir objeyi stringe çevirme işlemi (bu sayede bunu globalde internet üzerinde 
gösterebilme imkanı sağlıyoruz). 
- deserializasyon: veri dosyasından nesnelerin okunması işlemi. disktedki stringi ramde objeye çevirme (instance ı alınması gerekiyor(new leyerek değil)) işlemi. 
- serializasyon ve deserializasyon işlemleri için json, xml, binary formatları kullanılır.



DELEGATES =>
- metod taşımak için kullanılırlar. 
- photoshop örneği: bir resmi açıp üzerinde işlem yapmak için bir delegasyon yaparız.
- her delegate he metodu taşımaz. 
- metod olarak da kullanılır, değer de döndürür 
- delegates metod imzası ile return type ı aynı olan metodları taşır.
- c# collection olarak geçer.
- iki delegate le her şey yapılabilir -> action ve function lar
- bir yerde func, action, delegate gördüğümüz de orada metod çağırabiliyoruz.
- Delege bir metodu temsil eden bir referanstır.
- Delege bir referans türüdür.
- Delege bir metodu temsil eder.
- Delege bir metodu çağırabilir.
- Delege bir metodu başka bir metoda parametre olarak geçebilir.
- Delege bir metodu başka bir metoda geri döndürebilir.

private void Form1_Load(object sender, EventArgs e)
{
    // metod imzaları aynı dönüş tipleri aynı
    // c# için metod adının hiçbir önemi yoktur. c# için önemli olan metodun imzası ve geri dönüş tipidir.
}

private void textBox1_TextChanged(object sender, EventArgs e)
{
    EventHandler handler = null;
}

private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
{

}

delegates neye yarar?
- Delege, bir metodu başka bir metoda parametre olarak geçmek için kullanılır. =>
- callback fonksiyonları için kullanılır.
- Eventlerde kullanılır.
- Asenkron programlamada kullanılır.
- c deki function pointer gibi düşünebiliriz.

- sqlde bir özel durum : stored procedureler geriye değer döndürmez. sadece tamsayı döndürebilir. normalde derlenmiş tablo gösterir.
- function lar değer döndürür.