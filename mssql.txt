** inner join -> joinlenen ilişkili iki tabloya ait eşleşen veriler gelir.
-- Müşteri ve sipariş tablosu varsa, sadece siparişi olan müşteriler listelenir.

** left (left outer) join -> sol tablodaki tüm kayıtları getirir, sağ tabloda eşleşme 
varsa getirir yoksa null döner.
-- Tüm müşteriler listelenir, siparişi olmayan müşterilerde sipariş alanları NULL olur.

** right (right outer) join -> sağ tablodaki tüm kayıtları getirir. Sol tabloda eşleşme 
varsa getirir, yoksa NULL döner.

-- Tüm siparişler listelenir, müşteri bilgisi yoksa NULL döner.
** full (full outer) join -> Her iki tablodaki tüm kayıtları getirir. Eşleşme varsa
getirir, eşleşme yoksa NULL döner.
-- Müşterisi olmayan siparişler veya siparişi olmayan müşteriler de dahil olur.

** cross join -> İki tablo arasında kartezyen çarpım yapar. Her satır, diğer
tablodaki tüm satırlarla eşleşir. SELECT * FROM Tablo1 CROSS JOIN Tablo2;
-- 3 müşteri, 4 ürün varsa, sonuç 3 × 4 = 12 satır olur.
ProductID	ProductName	  Price
1	          Laptop	  1500
2	          Monitor	  800
3	          Mouse	      150
ShippingID	OptionName	   ShippingCost
1	       Standart Kargo	   20
2	       Ekspres Kargo	   50
3	       Drone Teslim	       150
Müşteriye, her ürün için her kargo tipinde olası toplam fiyat kombinasyonlarını göstermek 
istiyoruz.
Her ürün, her kargo tipiyle eşleşsin → yani her olasılık listelensin. -> cross join
SELECT 
    p.ProductName,
    s.OptionName,
    p.Price,
    s.ShippingCost,
    (p.Price + s.ShippingCost) AS TotalPrice
FROM Products p
CROSS JOIN ShippingOptions s
ORDER BY p.ProductName, s.ShippingCost;
Neden cross join -> Çünkü her ürünün, her kargo tipiyle her olası kombinasyonu görmek 
istiyoruz. Bu, klasik bir kartezyen çarpım örneğidir ve JOIN ilişkisi gerekmez.

** self join -> Bir tabloyu kendiyle joinlemek için kullanılır. Genelde hiyerarşik 
yapılarda kullanılır (örneğin çalışan yöneticisi ilişkisi). SELECT A.Ad AS Calisan,
B.Ad AS Yonetici FROM Calisanlar A LEFT JOIN Calisanlar B ON A.YoneticiID = B.ID;
Bir başka kullanım örneği;
-- aynı kategorilerdeki ürünleri getir
select p1.ProductName, p2.ProductName from Products p1 join Products p2 on
p1.CategoryID = p2.CategoryID 

-- union - iki veya daha fazla select sorgusunun sonuçlarını birleştirir. duplicate
(tekrarlı) olanları göstermez. birleşen sorgu sonuçlarının tipi, adedi aynı olmalıdır.

-- union all - yine iki veya daha fazla sorgu sonucunu birleştirir. ancak tekrarlı veriyi 
de gösterir.

-- except - birleşen iki sonuçtan ilk ile ikinciyi kıyaslar ve ilkinde olup ikincisinde 
olmayan sonuçları döner.
-- ürünler tablosunda olup satışı olmayan ürünler
select ProductID from Products 
except 
select ProductID from [Order Details]

-- intersect - birleşen iki sonucun kesişimini, ortak olan sonuçlarını verir.
-- liste fiyatına satılan ürünlerin adları -- hangi ürünlerde products içindeki unitprice 
ile orderdetails içindeki unitprice eşit
select p.ProductID, p.UnitPrice from Products p group by ProductID, UnitPrice
intersect
select od.ProductID, od.UnitPrice from [Order Details] od group by ProductID, UnitPrice

orphan records (öksüz yetim kayıt) -> inner join yazdığımızda karşısına değer 
gelmiyorsa orphan olma ihtimali yüksektir ama kesin değildir. çünkü her kayıp orphan
diyemeyiz. yeni bir departman açıldı. ama içerisine personel atanmadı. buna orphan 
denilmez. 5 departman var 1 den 5 e kadar id lenmiş.
fakat bir personelin departmanı 11. 11 id li departman yok. bu orphan dır. bunun önüne
foreign key kısıtlaması ile geçeriz.

veritabanı programcılığında en üst seviyede 2 kural var:
1. veri tutarlılığı
2. minimum tekrar

SELECT Department, COUNT(*) FROM Employees GROUP BY Department HAVING COUNT(*) >
5;
Calisanlari departmanlara gore gruplar ve her departmanda en az 5 calisan olanlari 
listeler.

balance tree -> sql in indeksleme mekanizması

kendi içerisinde bir hiyerarşisi olan tablolar kendi kendine ilişkilidir. -> 
northwind employees tablosu. çünkü içerisinde müdür olan çalışanlar da var.
self join kullanılarak bu tablolarda hiyerarşi sorgusu yazılabilir.
Örnek - Her çalışanın bağlı olduğu yöneticiyi listelemek.
SELECT 
    e.EmployeeID AS CalisanID,
    e.FirstName + ' ' + e.LastName AS CalisanAdi,
    m.EmployeeID AS YoneticiID,
    m.FirstName + ' ' + m.LastName AS YoneticiAdi
FROM Employees e
LEFT JOIN Employees m ON e.ReportsTo = m.EmployeeID
ORDER BY e.EmployeeID;
EmployeeID	LastName	FirstName	ReportsTo
1	        Davolio	     Nancy	       NULL
2	        Fuller	     Andrew	       1
3	        Leverling	 Janet	       2
4	        Peacock	    Margaret	   2
ReportsTo → bu çalışanın hangi yöneticisine bağlı olduğunu gösterir (EmployeeID'ye 
referans verir).
Kendine bağlanır, bu yüzden self join gerekir.

-- bir db açıkken kaydettiğimiz function ları bu db altında programmability -> sclara-valued func içinde görebiliriz.